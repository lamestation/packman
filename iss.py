#!/usr/bin/env python
# -*- coding: utf-8 -*-

import string

import argparse
import xml.etree.ElementTree as etree
import version

def get_template():
    return string.Template("""\
# This file automagically generated by iss.py
[Setup]

AppID=${APPID}
AppName=${NAME}
AppVersion=${VERSION}
AppPublisher=${ORGANIZATION}
AppPublisherURL=${WEBSITE}
AppSupportURL=${WEBSITE}
AppUpdatesURL=${WEBSITE}
DefaultDirName={pf}\\${NAME}
DefaultGroupName=${NAME}
OutputDir="../staging/"
OutputBaseFilename=${SHORTNAME}-${VERSION}-win-setup
Compression=lzma/Max
SolidCompression=true
AlwaysShowDirOnReadyPage=true
UserInfoPage=no
UsePreviousUserInfo=no
DisableDirPage=yes
DisableProgramGroupPage=yes
DisableReadyPage=no
WizardImageFile="${GRAPHICSPATH}/win-banner.bmp"

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "../staging/${SHORTNAME}/*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

[Icons]
Name: "{group}\\${NAME}"; Filename: "{app}\\${SHORTNAME}.exe" ; IconFilename: "{app}\win.ico";
Name: "{group}\{cm:UninstallProgram,{NAME}}"; Filename: "{uninstallexe}";
Name: "{commondesktop}\\${NAME}"; Filename: "{app}\\${SHORTNAME}.exe"; IconFilename: "{app}\win.ico";
Name: "{userappdata}\Microsoft\Internet Explorer\Quick Launch\\${NAME}"; Filename: "{app}\\${SHORTNAME}.exe"; IconFilename: "{app}\win.ico";

[Run]
Filename: {app}\\${SHORTNAME}.exe; Description: "{cm:LaunchProgram,${NAME}}"; Flags: skipifsilent NoWait PostInstall; 
""")

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='iss.py - generate Inno Setup install script from repo.xml')
    parser.add_argument('project', nargs=1, metavar="PROJECT", help="repo.xml file to parse")
    parser.add_argument('-o','--out', nargs=1, metavar="OUTPUT", help="Output .iss file (default: 'installer.iss')")
    parser.add_argument('-s','--show', action='store_true', help="Dump output to stdout")
    args = parser.parse_args()

    tree = etree.parse(args.project[0])
    root = tree.getroot()
    target = root.find('target/win')

    gfx = root.find('gfx')
    if gfx == None:
        raise Exception("Graphics not found!")
    
    info = root.find('info')
    versionnode = root.find('version')

    script = get_template()

    rendering = script.substitute(
                    APPID           = target.attrib['AppID'],
                    ORGANIZATION    = info.attrib['organization'],
                    NAME            = info.attrib['application'],
                    SHORTNAME       = info.attrib['application'].lower(),
                    WEBSITE         = info.attrib['url'],
                    VERSION         = version.get_version(versionnode),
                    GRAPHICSPATH    = gfx.attrib['path'],
                )

    if not args.out and not args.show:
        print "Command will not produce any output without -o or -s"

    if args.out:
        f = open(args.out[0], 'w')
        f.write(rendering)
        f.close()

    if args.show:
        print rendering
