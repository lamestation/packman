#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os, sys
import importer
import logging
import util
import repocontroller

import argparse

class Packman:
    def __init__(self, repofile):
        try:
            self.config = repocontroller.RepoController(repofile)
        except IOError:
            print "'"+repofile+"' not found; please specify a valid packman file"
            sys.exit(1)

    def checkout(self, refresh):
        vcs = importer.get_module('vcs','git')
        importer.require(vcs)

        if refresh:
            self.config.print_info()
            print util.table("Path", "Version", "URL")
            print "-"*80

        self.repos = {}
        for a in self.config.repo:
            repo = vcs.Repo(a['url'],a['path'])
            self.repos[a['path']] = repo

            if refresh:
                repo.update()
                print util.table(repo.path, repo.get_version(), repo.url)
        
        if refresh:
            print 

    def filelist(self):
        fl = []
        for r in self.repos.values():
            fl.extend(r.list_files())

#        logging.debug(fl)
        return fl

    def archive(self, archivename):
        util.archive(archivename,self.filelist())


    def build(self,jobs='1'):
        packagelist = importer.get_modulelist('builder')
        packagelist.remove('base')

        self.builders = {}
        self.projects = {}
        for p in packagelist:
            self.builders[p] = importer.get_module('builder',p)
            importer.require(p)

        self.files = {}
        self.files['bin'] = []
        self.files['lib'] = []
        self.files['share'] = []

        for r in self.config.repo:
            if 'root' in r:
                path = os.path.join(r['path'],r['root'])
            else:
                path = r['path']

            print r['type']
            self.projects[r['path']] = self.builders[r['type']].Builder(path,
                    self.repos[r['path']].get_version())
                 
            outfiles = self.projects[r['path']].build(jobs, r['exclude'])
            for f in self.files:
                outfiles[f] = [x for x in outfiles[f] if x]
                self.files[f].extend(outfiles[f])

    def package(self, targetname):
        try:
            self.target = importer.get_module('target',targetname)
        except ImportError:
            self.target = importer.get_module('target','base')

        importer.require(self.target)

        self.packager = self.target.Packager(self.config.info, 
                self.repos[self.config.master].get_version(),
                files=self.files,
                )

        logging.debug('target = '+targetname)
        if targetname == 'clean':
            self.packager.clean()
        else:
            self.packager.make()
    

if __name__ == "__main__":

    packagelist = importer.get_modulelist('target')
    packagelist.remove('base')

    parser = argparse.ArgumentParser(description=os.path.basename(__file__)+' - make working with your project more complicated')
    parser.add_argument('-r','--repo',      nargs=1, metavar='REPO',    default=['repo.xml'], help="Project repository config file (default: packman.xml)")
    parser.add_argument('-c',               nargs=1, metavar='DIR',     help="Change to DIR before running")
    parser.add_argument('-l','--log',       nargs=1, metavar='LEVEL',   help="Log level of debug output (DEBUG, INFO, WARNING, ERROR, CRITICAL)")
    parser.add_argument('-a','--archive',   nargs=1, metavar='NAME',    help="Create tar archive from super-repository")
    parser.add_argument('--list-src',       action='store_true',        help="List all files in super-repository")
    parser.add_argument('--list-build',     action='store_true',        help="List all files to be included in package")
    parser.add_argument('-j','--jobs',      nargs=1, metavar='JOBS',    help="Number of jobs to pass to child builds")
    parser.add_argument('--refresh',        action='store_true',        help="Force update of all checkouts")
    parser.add_argument('target',           nargs='?', metavar='TARGET',help="Target platform to build ("+', '.join(packagelist)+")")

    args = parser.parse_args()

    if args.log:
        logging.basicConfig(level=args.log[0])

    pm = Packman(args.repo[0])

    if args.c:
        os.chdir(args.c[0])

    pm.checkout(args.refresh)
    pm.build(args.jobs[0])

    if not args.target == None:
        pm.package(args.target)

    if args.list_src:
        for l in pm.filelist():
            print l

    if args.archive:
        pm.archive(args.archive[0])
